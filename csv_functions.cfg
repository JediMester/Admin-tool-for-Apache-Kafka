#!/bin/bash

### CSV fájl beolvasására szolgáló függvények:

# Nincs .csv fájl

declare -a sh_files=()
#declare -a topics=()

function task_options() {
	
	echo ""
	printf "%s\n" \
	"Action lehetőségek: " \
	"${YEL}1. User ACL lekérdezés" \
	"2. Üzenet produce-olás topic-ra" \
	"3. Üzenet consume-olás topic-ról" \
	"4. Utolsó offset száma partíciónként" \
	"5. Jogosultság állítás" \
	"6. Jogosultság állítás transactionalID-val" \
	"7. Partíció szám állítás" \
	"8. Retention period állítás" \
	"9. Offset reset" \
	"10. Offset törlés" \
	"11. Topic describe-olás" \
	"12. Rolling restart" \
	"13. Kafka service: stop & disable" \
	"14. Kafka service: start & enable${NC}" \
	"${LBL}W. VISSZA a welcome page-re${NC}" \
	"${GRE}T. VISSZA a task lehetőségekhez${NC}" \
	"${RED}K. KILÉPÉS${NC}"
	echo ""
	
	read -p "Kérlek válassz egyet: " action

}

function no_csv_provided() {
	# User input-ok bekérése --> nincs .csv
	create_log_dir
	
	#echo "${LBL}Nincs .csv fájl, ezért további user input szükséges.${NC}"
	
	# Ticket számának bekérése
	printf "%s\n" \
	"" \
	"Van releváns ticket szám?" \
	"${YEL}1. Van" \
	"2. Nincs${NC}" \
	""
	
	read -p "Válasz: " ticket_or_not
	echo ""
	case ${ticket_or_not} in
	1)
		read -p "Ticket száma: " ticket_num
	
		is_logging_on
	
		sh_mgmt
		
		task_options
		;;
	2)
		task_options
		;;
	esac
	
	case $action in
	1)
		printf "%s\n" \
		"${YEL}1. Tömeges ACL lekérdezés (.csv fájlból)" \
		"2. Szimpla ACL lekérdezés${NC}" \
		""
		
		read -p "Válasz: " complex_or_simple
		
		case $complex_or_simple in
		2)
			acl_inputs
		
			validate_environment "$env"
			echo ""
			
			#get_user_acl
			get_user_acl >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Helyes az ACL parancs?${NC}" \
			"1. ${RED}Nem, javítom${NC}" \
			"2. ${GRE}Igen, durranhat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				acl_inputs
				
				get_env
				
				choose_zookeeper
				
				validate_environment "$env"
			
				get_user_acl >> $sh_file
				sh_files+=("$sh_file")
				cat $sh_file
				
				echo ""
				printf "%s\n" \
				"${YEL}Most már durroghat a parancs?${NC}" \
				"1. ${RED}Nem${NC}" \
				"2. ${GRE}Igen, durroghat${NC}" \
				""
				read -p "Válasz: " answer
				
				case $answer in
				1) 
					exit_or_restart_or_new_task
					#exit 1
					;;
				2)
					echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
					echo ""
					"$sh_file"
					
					exit_or_restart_or_new_task
					;;
				esac
				;;
		
			
			2)
				#"$kafka_acls_path" --authorizer-properties zookeeper.connect="$selected_zookeeper" --list --principal User:"$user"
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			
			esac
		
			;;	
		
		1)
			acl_csv=""
			
			get_env
				
			choose_broker
			
			if [[ ! -d $acl_dir ]]; then
				mkdir -p $acl_dir
			fi
			
			printf "%s\n" \
			"${YEL}1. ACL user szerint" \
			"2. ACL topic szerint${NC}" \
			""
		
			read -p "Válasz: " user_or_topic
			echo ""
			
			echo "Belépés a ${LBL}$ticket_dir${NC} mappába..."
			sleep 0.5
				
			cd "$ticket_dir" && pwd && ls -alh
			read -p "Kérlek válaszd ki a .csv fájlodat az ACL task-hoz: " acl_csv
			
			IFS=$'\n' read -d '' -r -a acl_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$acl_csv")
			unset IFS
			
			if [[ ! -z "$acl_csv" ]]; then
				acl_with_csv_name="/home/kafka/kafka-admin-tool/ticketek/acl_dir/${acl_csv}_${current_date}"
				acl_file="$acl_with_csv_name"
			
				touch "$acl_file"
		
				chmod +rwx "$acl_file"
				
			fi
			
			for line in ${acl_complex[@]}; do
			user="$(echo "$line" | awk -F ';' '{print $1}')"
			topic="$(echo "$line" | awk -F ';' '{print $2}')"
			
				if { [[ -z "$user" ]] || [[ -z "$topic" ]] ;}; then
					continue
				fi
				
			get_acl_complex >> "$acl_file"
			
			done
			
			echo "A(z) ${YEL}Az ACL parancsokat tartalmazó fájl: $acl_file${NC}"
			
		;;
		
		esac
		;;
			
	2)
		get_env
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
	
		validate_environment "$env"
		
		produce_message_inputs
		
		produce_message >> $sh_file
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes az üzenet produce-olós parancs?{NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1) 
			produce_message_inputs
	
			get_env
		
			if [[ "$kafka_version" == "2.7.0" ]]; then
			
				choose_zookeeper
			else
				choose_broker
			fi
	
			validate_environment "$env"
		
			produce_message >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
			
		esac
		
		;;
		
	3)
		get_env
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
	
		validate_environment "$env"
		
		consume_message_inputs
		
		consume_message >> $sh_file
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes az üzenet consume-olós parancs?${NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1) 
			consume_message_inputs
	
			get_env
		
			if [[ "$kafka_version" == "2.7.0" ]]; then
			
				choose_zookeeper
			else
				choose_broker
			fi
	
			validate_environment "$env"
		
			consume_message >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
			
		esac
		;;
	4)
		get_env
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
	
		validate_environment "$env"
		
		partition_offset_inputs
		
		last_offset_per_partition >> $sh_file
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes a parancs?${NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1) 
			get_env
		
			if [[ "$kafka_version" == "2.7.0" ]]; then
			
				choose_zookeeper
			else
				choose_broker
			fi
		
			validate_environment "$env"
			
			partition_offset_inputs
			
			last_offset_per_partition >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
			
		esac
		;;
		
	6)
		modify_rights_inputs
		read -p "Transactinal ID: " transactional_id
		
		#if [[ "$kafka_version" == "2.7.0" ]]; then
		#
		#	choose_zookeeper
		#else
		#	choose_broker
		#fi
		
		choose_zookeeper
		
		validate_environment "$env"
		
		add_modify_rights_no_csv_with_transactionalid
		;;
	5)
		modify_rights_inputs
		
		get_env
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
		
		#choose_broker
	
		validate_environment "$env"
		
		add_modify_rights >> "$sh_file"
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes a jogosultság állítós parancs?${NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1) 
			modify_rights_inputs
	
			get_env
		
			if [[ "$kafka_version" == "2.7.0" ]]; then
			
				choose_zookeeper
			else
				choose_broker
			fi
	
			validate_environment "$env"
		
			add_modify_rights >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
			
		esac
		;;	
	
	7)
		topic_only_inputs_no_csv
		
		get_env
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
	
		validate_environment "$env"
		
		modify_topic_partitions >> $sh_file
		
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes a partíció módosítós parancs?${NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1) 
			topic_only_inputs_no_csv
		
			get_env
			
			if [[ "$kafka_version" == "2.7.0" ]]; then
			
				choose_zookeeper
			else
				choose_broker
			fi
		
			validate_environment "$env"
			
			modify_topic_partitions >> $sh_file
		
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
			
		esac
		;;
		
	8)
		topic_only_inputs_no_csv
		
		get_env
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
	
		validate_environment "$env"
		
		modify_retention_no_csv >> $sh_file
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes a retention módosítós parancs?${NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1) 
			topic_only_inputs_no_csv
		
			get_env
			
			if [[ "$kafka_version" == "2.7.0" ]]; then
			
				choose_zookeeper
			else
				choose_broker
			fi
		
			validate_environment "$env"
			
			modify_retention_no_csv >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
			
		esac
		;;
		
	9)
		offset_inputs
		
		get_env
		
		choose_broker
	
		validate_environment "$env"
		
		reset_offsets >> $sh_file
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes az offset reset-elő parancs?${NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1) 
			offset_inputs
		
			get_env
		
			choose_broker
	
			validate_environment "$env"
		
			reset_offsets >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
			
		esac
		;;
	10)
		offset_inputs
		
		get_env
		
		choose_broker
		
		validate_environment "$env"
		
		delete_offsets >> $sh_file
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes az offset törlő parancs?${NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1) 
			offset_inputs
		
			get_env
		
			choose_broker
		
			validate_environment "$env"
		
			delete_offsets >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
			
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
			
		esac
		;;
	
	11)
		desc_topic_inputs
			
		get_env
		
		choose_broker
		
		validate_environment "$env"
		
		describe_topic >> $sh_file
		sh_files+=("$sh_file")
		cat $sh_file
		
		echo ""
		printf "%s\n" \
		"${YEL}Helyes a topic describe parancs?${NC}" \
		"1. ${RED}Nem, javítom${NC}" \
		"2. ${GRE}Igen, durranhat${NC}" \
		""
		read -p "Válasz: " answer
		
		case $answer in
		1)
		
			desc_topic_inputs
			
			get_env
			
			choose_broker
			
			validate_environment "$env"
			
			describe_topic >> $sh_file
			sh_files+=("$sh_file")
			cat $sh_file
		
			echo ""
			printf "%s\n" \
			"${YEL}Most már durroghat a parancs?${NC}" \
			"1. ${RED}Nem${NC}" \
			"2. ${GRE}Igen, durroghat${NC}" \
			""
			read -p "Válasz: " answer
			
			case $answer in
			1) 
				exit_or_restart_or_new_task
				#exit 1
			    ;;
			2)
				echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
				echo ""
				"$sh_file"
				
				exit_or_restart_or_new_task
				;;
			esac
			;;
			
		2)
			echo "A parancsot tartalmazó .sh fájl: ${LBL}$sh_file${NC}"
			echo ""
			"$sh_file"
			
			exit_or_restart_or_new_task
			;;
		
		esac
		;;
	
	12)
		rolling_restart
		#get_all_active_brokers
		
		exit_or_restart_or_new_task
		;;
	
	13)
		printf "%s\n" \
		"${YEL}Biztosan mehet a stop + disable task?" \
		"1. Igen, mehet" \
		"2. Nem, zúzás vissza${NC}" \
		""
		read -p "Válasz: " option
		case ${option} in
		1)
			get_env
			
			if { [[ ${env} == "pp" ]] || [[ ${env} == "pr" ]] ;}; then
			printf "%s\n" \
			"Melyik site álljon le?" \
			"1. lajos" \
			"2. babér" \
			""
			read -p "Válasz: " dc_option
			fi
			
			stop_and_disable_kaf
			;;
		2)
			task_options
			;;
		esac
		;;
	
	14)
		printf "%s\n" \
		"${YEL}Biztosan mehet a start + enable task?" \
		"1. Igen, mehet" \
		"2. Nem, zúzás vissza${NC}" \
		""
		read -p "Válasz: " option
		case ${option} in
		1)
			get_env
			
			if { [[ ${env} == "pp" ]] || [[ ${env} == "pr" ]] ;}; then
			printf "%s\n" \
			"Melyik site induljon el?" \
			"1. lajos" \
			"2. babér" \
			""
			read -p "Válasz: " dc_option
			fi
			
			start_and_enable_kaf
			;;
		2)
			task_options
			;;
		esac
		;;
		
	w)
		lets_work
		;;
	
	t)
		work_options
		;;
		
	k)
		xIT
		;;
	
	*)
		echo "Hiba: nem adtál meg semmilyen eksönt!"
		#exit 1
		
		exit_or_restart_or_new_task
		;;
	esac

}

# Simple .csv fájl van megadva

function simple_csv() { 
	
	create_log_dir

	sed -i 's/\r//g' "/home/kafka/kafka-admin-tool/ticketek/$csv_file"
	
	echo "${LBL}A ${csv_file_path} fájl beolvasva.${NC}"
  
	#get_kaf_ver
	
	#echo "${LBL}A cluster-en jelenleg futó Kafka verzió:${NC} ${YEL}$kafka_version${NC}"
	
	# Ticket számának bekérése
	read -p "Ticket száma: " ticket_num
	
	is_logging_on
	
	sh_mgmt
	
	if [[ "$kafka_version" == "2.7.0" ]]; then
	
		choose_zookeeper
	else
		choose_broker
	fi
	
	validate_environment "$env"
	
	#read -p "Ticket száma: " ticket_num
	
	# Action választása
	printf "%s\n" \
	"Action lehetőségek: " \
	"${YEL}1. modify_or_add_rights" \
	"2. prefixed_producer_creation" \
	"3. producer_creation" \
	"4. consumer_creation (prefixed és nem prefixed)${NC}" \
	""
	
	read -p "Kérlek válassz egyet: " action
	
	case $action in
	1)
		read -p "Jogosultság (read, write, describe, idempotent_write): " operation
		
		IFS=$'\n' read -d '' -r -a data_simple < <(awk -F ';' 'NR>0 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
		unset IFS
	
		for line in "${data_simple[@]}"; do
		topic="$(echo "$line" | awk -F ';' '{print $1}')"
		user="$(echo "$line" | awk -F ';' '{print $2}')"
		
		done
		
		chmod +x ${sh_file}
		
		log_zipper
		;;
		
	2|3|4)
		
		IFS=$'\n' read -d '' -r -a data_simple < <(awk -F ';' 'NR>0 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
		unset IFS
	
		for line in "${data_simple[@]}"; do
		topic="$(echo "$line" | awk -F ';' '{print $1}')"
		user="$(echo "$line" | awk -F ';' '{print $2}')"
		
		done
		
		chmod +x ${sh_file}
		
		log_zipper
		;;
	
	*)
		echo "Hiba: nem adtál meg semmilyen eksönt!"
		xIT
		;;
	
	esac
}

function simple_csv_only_topics() {

	create_log_dir

	sed -i 's/\r//g' "/home/kafka/kafka-admin-tool/ticketek/$csv_file"
	echo "${LBL}A ${csv_file_path} fájl beolvasva.${NC}"

	#get_kaf_ver

	#echo "${LBL}A cluster-en jelenleg futó Kafka verzió:${NC} ${YEL}$kafka_version${NC}"
	
	# Ticket számának bekérése
	read -p "Ticket száma: " ticket_num
	
	is_logging_on
	
	sh_mgmt
	
	if [[ "$kafka_version" == "2.7.0" ]]; then
	
		choose_zookeeper
	else
		choose_broker
	fi 
	
	validate_environment "$env"
	
	# Action választása
	printf "%s\n" \
	"Action lehetőségek: " \
	"${YEL}1. modify_or_add_rights" \
	"2. producer_creation" \
	"3. prefixed_producer_creation" \
	"4. topic_creation" \
	"5. topic_creation_with_custom_retention" \
	"6. consumer_creation (prefixed és nem prefixed)" \
	"7. modify_topic_partitions" \
	"8. modify_retention_period${NC}" \
	""
	
	read -p "Kérlek válassz egyet: " action
	
	case $action in
	
	6)
		consumer_rel_inputs_simple_csv_ot
		;;
		
	2|3)
		producer_rel_inputs_simple_csv_ot
		;;
		
	1)
		modify_rights_inputs
		;;
		
	4|5|7|8)
		topic_only_inputs_simple_csv_ot
		
		validate_retention_period "$retention_period"
		
		# Day --> millisec konverzió
		day_to_ms_retention="$(( 86400000 * $retention_period ))"
		;;
	
	*)
		echo "Hiba: nem adtál meg semmilyen eksönt!"
		xIT
		;;
	
	esac
	
	IFS=$'\n' read -d '' -r -a data_simple_only_topics < <(awk -F ';' 'NR>0 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
	unset IFS

	for line in "${data_simple_only_topics[@]}"; do
	topic="$(echo "$line" | awk -F ';' '{print $1}')"
	
		if [[ -z "$topic" ]]; then
			break
		fi
	
	done
	
	chmod +x ${sh_file}
		
	log_zipper
}


# Complex .csv fájl van megadva

function complex_csv() {
	
	#declare -a sh_files=()
	
	create_log_dir
	
	sed -i 's/\r//g' "/home/kafka/kafka-admin-tool/ticketek/$csv_file"
	
	echo "${LBL}A ${csv_file} fájl beolvasva.${NC}"
  
	#get_kaf_ver
	
	#echo "${LBL}A cluster-en jelenleg futó Kafka verzió:${NC} ${YEL}$kafka_version${NC}"
	
	# Ticket számának bekérése
	read -p "Ticket száma: " ticket_num
	
	is_logging_on
	
	sh_mgmt
	
	#if [[ "$kafka_version" == "2.7.0" ]]; then
	#
	#	choose_zookeeper
	#else
	#	choose_broker
	#fi
	
	#validate_environment "$env"
	
	# Action választása
	printf "%s\n" \
	"Action lehetőségek: " \
	"${YEL}1. topic_creation" \
	"2. topic_creation_with_retention" \
	"3. consumer_creation" \
	"4. prefixed_consumer_creation" \
	"5. producer_creation" \
	"6. prefixed_producer_creation" \
	"7. modify_or_add_rights${NC}" \
	""
	
	read -p "Kérlek válassz egyet: " action
	echo ""
	
	case $action in
		
	1)
		start_time=$(date +%s)
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
		
		validate_environment "$env"
		
		echo ""
		
		IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
		unset IFS
		
		for line in "${data_complex[@]}"; do
		topic="$(echo "$line" | awk -F ';' '{print $2}')"
		#replication_factor="$(echo "$line" | awk -F ';' '{print $8}')"
		replication_factor="$(echo "$line" | awk -F ';' '{print $9}')"
		#partitions="$(echo "$line" | awk -F ';' '{print $9}')"
		partitions="$(echo "$line" | awk -F ';' '{print $10}')"
		
			if { [[ -z "$topic" ]] || [[ -z "$partitions" ]] || [[ -z "$replication_factor" ]] ;}; then
				#break
				continue
			fi
		
		echo "A(z) ${YEL}$topic${NC} topic fog létrejönni, partíciók száma: ${GRE}$partitions${NC}, rep. faktor: ${GRE}$replication_factor${NC}."
		create_topic >> "$sh_file"
		
		done
		
		sh_files+=("$sh_file")
		
		log_zipper
		
		echo ""
		
		end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
		echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."  # A futási idő kiiratása
		echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
		echo "A log fájl: ${LBL}${log_file}${NC}"
		
		echo ""
		
		exit_or_restart_or_new_task
		;;
		
	2)
		start_time=$(date +%s)
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
		
		validate_environment "$env"
		
		echo ""
		
		declare -i retention_period
		
		IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
		unset IFS
		
		for line in "${data_complex[@]}"; do
		
		topic="$(echo "$line" | awk -F ';' '{print $2}')"
		#retention_period="$(echo "$line" | awk -F ';' '{print $7}')"
		retention_period="$(echo "$line" | awk -F ';' '{print $8}')"
		#replication_factor="$(echo "$line" | awk -F ';' '{print $8}')"
		replication_factor="$(echo "$line" | awk -F ';' '{print $9}')"
		#partitions="$(echo "$line" | awk -F ';' '{print $9}')"
		partitions="$(echo "$line" | awk -F ';' '{print $10}')"
		
			if { [[ -z "$topic" ]] || [[ -z "$partitions" ]] || [[ -z "$replication_factor" ]] || [[ -z "$retention_period" ]];}; then
				#break
				continue
			fi
		
		validate_retention_period "$retention_period"
		
		# Day --> millisec konverzió
		day_to_ms_retention="$(( 86400000 * $retention_period ))"
		
		echo "A(z) ${YEL}$topic${NC} topic fog létrejönni, partíciók száma: ${GRE}$partitions${NC}, rep. faktor: ${GRE}$replication_factor${NC}, retention: ${GRE}$day_to_ms_retention${NC}."
		create_topic_with_retention >> "$sh_file"
		
		done
		
		sh_files+=("$sh_file")
		
		log_zipper
		
		echo ""
		
		end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
		echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."
		echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
		echo "A log fájl: ${LBL}${log_file}${NC}"
		
		echo ""
		
		exit_or_restart_or_new_task
		;;
			
	3)
		start_time=$(date +%s)
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
		
		validate_environment "$env"
		
		echo ""
		
		IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
		unset IFS
		
		for line in ${data_complex[@]}; do
		user="$(echo "$line" | awk -F ';' '{print $1}')"
		#topic_read="$(echo "$line" | awk -F ';' '{print $3}')"
		topic_read="$(echo "$line" | awk -F ';' '{print $4}')"
		#group_id="$(echo "$line" | awk -F ';' '{print $4}')"
		group_id="$(echo "$line" | awk -F ';' '{print $5}')"
		
			if { [[ -z "$user" ]] || [[ -z "$topic_read" ]] || [[ -z "$group_id" ]] ;}; then
				continue
			fi
			
		echo "A(z) ${YEL}$user${NC} consumer fog létrejönni a ${GRE}$topic_read${NC} topic-on a ${GRE}$group_id${NC} consumer group-al."
		create_consumer_complex_csv >> "$sh_file"
		
		done
		
		sh_files+=("$sh_file")
		
		log_zipper
		
		echo ""
		
		end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
		echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."  # A futási idő kiiratása
		echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
		echo "A log fájl: ${LBL}${log_file}${NC}"
		
		echo ""
		
		exit_or_restart_or_new_task
		;;
			
	4)
		start_time=$(date +%s)
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
		
		validate_environment "$env"
		
		echo ""
		
		IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
		unset IFS
		
		for line in "${data_complex[@]}"; do
		user=$(echo "$line" | awk -F ';' '{print $1}')
		#topic_read=$(echo "$line" | awk -F ';' '{print $3}')
		topic_read=$(echo "$line" | awk -F ';' '{print $4}')
		#group_id_prefix=$(echo "$line" | awk -F ';' '{print $5}')
		group_id_prefix=$(echo "$line" | awk -F ';' '{print $6}')
		
			if { [[ -z "$user" ]] || [[ -z "$topic_read" ]] || [[ -z "$group_id_prefix" ]] ;}; then
				continue
			fi
			
		echo "A(z) ${GRE}$user${NC} consumer fog létrejönni a ${GRE}$topic_read${NC} topic-on a ${YEL}$group_id_prefix${NC} nevű prefixed consumer group-al."
		create_consumer_complex_csv >> "$sh_file"
		
		done
		
		sh_files+=("$sh_file")
		
		log_zipper
		
		echo ""
		
		end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
		echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."  # A futási idő kiiratása
		echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
		echo "A log fájl: ${LBL}${log_file}${NC}"
		
		echo ""
		
		exit_or_restart_or_new_task
		;;
			
	5)
		start_time=$(date +%s)
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
		
		validate_environment "$env"
		
		echo ""
		
		IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
		unset IFS
		
		for line in "${data_complex[@]}"; do
		user=$(echo "$line" | awk -F ';' '{print $1}')
		#topic_write=$(echo "$line" | awk -F ';' '{print $6}')
		topic_write=$(echo "$line" | awk -F ';' '{print $7}')
		
			if { [[ -z "$user" ]] || [[ -z "$topic_write" ]] ;}; then
				#break
				continue
			fi
		
		echo "A(z) ${YEL}$user${NC} producer fog létrejönni a ${YEL}$topic_write${NC} topic-on."
		create_producer_complex_csv >> "$sh_file"
		
		done
		
		sh_files+=("$sh_file")
		
		log_zipper
		
		echo ""
		
		end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
		echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."  # A futási idő kiiratása
		echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
		echo "A log fájl: ${LBL}${log_file}${NC}"
		
		echo ""
		
		exit_or_restart_or_new_task
		;;
			
	6)
		start_time=$(date +%s)
		
		if [[ "$kafka_version" == "2.7.0" ]]; then
		
			choose_zookeeper
		else
			choose_broker
		fi
		
		validate_environment "$env"
		
		echo ""
		
		IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
		unset IFS
		
		for line in "${data_complex[@]}"; do
		user=$(echo "$line" | awk -F ';' '{print $1}')
		#topic_write=$(echo "$line" | awk -F ';' '{print $6}')
		topic_write=$(echo "$line" | awk -F ';' '{print $7}')
		
			if { [[ -z "$user" ]] || [[ -z "$topic_write" ]] ;}; then
				#break
				continue
			fi
		
		echo "A(z) ${YEL}$user${NC} producer fog létrejönni a ${YEL}$topic_write${NC} prefixed topic-on."
		create_producer_complex_csv >> "$sh_file"
		
		done
		
		sh_files+=("$sh_file")
		
		log_zipper
		
		echo ""
		
		end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
		echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."  # A futási idő kiiratása
		echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
		echo "A log fájl: ${LBL}${log_file}${NC}"
		
		echo ""
		
		exit_or_restart_or_new_task
		;;
			
	7)
		start_time=$(date +%s)
		
		#if [[ "$kafka_version" == "2.7.0" ]]; then
		#
			choose_zookeeper
		#else
		#	choose_broker
		#fi
		
		validate_environment "$env"
		
		echo ""
		
		printf "%s\n" \
	    "Jogosultság:" \
	    "1. read" \
	    "2. describe" \
	    "3. write"
	    
		echo ""
	    
		read -p "Kérlek válassz egyet: " operation
		
		case $operation in
		1) 
			IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
			unset IFS
			
			for line in "${data_complex[@]}"; do
			user=$(echo "$line" | awk -F ';' '{print $1}')
			topic_read=$(echo "$line" | awk -F ';' '{print $4}')
			
			if { [[ -z "$user" ]] || [[ -z "$topic_read" ]] ;}; then
				continue
				#break
			fi
			
			echo "${YEL}A következő jogosultság hegesztés fog történni:${NC} user: ${GRE}$user${NC}, jogosultság: ${GRE}read${NC}"
			add_modify_rights_complex_csv >> "$sh_file"
		
			done
			
			sh_files+=("$sh_file")
			
			log_zipper
		
			echo ""
		
			end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
			echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."  # A futási idő kiiratása
			echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
			echo "A log fájl: ${LBL}${log_file}${NC}"
			
			echo ""
			
			exit_or_restart_or_new_task
			;;
			
		2)
			IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
			unset IFS
			
			for line in "${data_complex[@]}"; do
			user=$(echo "$line" | awk -F ';' '{print $1}')
			topic_describe=$(echo "$line" | awk -F ';' '{print $3}')
			
			if { [[ -z "$user" ]] || [[ -z "$topic_describe" ]] ;}; then
				continue
				#break
			fi
			
			echo "${YEL}A következő jogosultság hegesztés fog történni:${NC} user: ${GRE}$user${NC}, jogosultság: ${GRE}describe${NC}"
			add_modify_rights_complex_csv >> "$sh_file"
		
			done
			
			sh_files+=("$sh_file")
			
			log_zipper
		
			echo ""
		
			end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
			echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."  # A futási idő kiiratása
			echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
			echo "A log fájl: ${LBL}${log_file}${NC}"
			
			echo ""
			
			exit_or_restart_or_new_task
			;;
			
		3)
			IFS=$'\n' read -d '' -r -a data_complex < <(awk -F ';' 'NR>1 {print $0}' "/home/kafka/kafka-admin-tool/ticketek/$csv_file")
			unset IFS
			
			for line in "${data_complex[@]}"; do
			user=$(echo "$line" | awk -F ';' '{print $1}')
			topic_write=$(echo "$line" | awk -F ';' '{print $7}')
			
			if { [[ -z "$user" ]] || [[ -z "$topic_write" ]] ;}; then
				continue
				#break
			fi
			
			echo "${YEL}A következő jogosultság hegesztés fog történni:${NC} user: ${GRE}$user${NC}, jogosultság: ${GRE}write${NC}"
			add_modify_rights_complex_csv >> "$sh_file"
		
			done
			
			sh_files+=("$sh_file")
			
			log_zipper
		
			echo ""
		
			end_time=$(date +%s)  # Aktuális idő újbóli lekérése másodpercben
			echo "A script futási ideje: ${YEL}$(($end_time-$start_time))${NC} másodperc."  # A futási idő kiiratása
			echo "Létrejött a ticket számával ellátott .sh fájl benne a futtatandó kafka parancsokkal: ${LBL}$sh_file${NC}"
			echo "A log fájl: ${LBL}${log_file}${NC}"
			
			echo ""
			
			exit_or_restart_or_new_task
			;;
			
			esac
		
		;;	
		
	*)
		echo "Hiba: nem adtál meg semmilyen eksönt!"
		#exit 1
		
		echo ""
		
		exit_or_restart_or_new_task
		;;
		
	esac
}